Unit Tests:
A function called "multiplication" that returns the product of the two input numbers.

Expect multiplication(3, 2) to be a number
Expect multiplication(3, 2) to be equal to 6
Expect multiplication(3, 0.2) to be equal to 0.6
Expect multiplication(“a”, 4) to be an error
Expect multiplication(4,”a”) to be an error
Expect multiplication(“4”, 4) to be an error
Expect multiplication(4*3, 3) to be an error
Expect multiplication([4], 3) to be an error
Expect multiplication({3}, 3) to be an error
Expect multiplication(1, 2, 3) to be an error

A function called "concatOdds" takes two arrays of integers as arguments. It should return a single array that only contains the odd numbers, in ascending order, from both of the arrays.
Example: concatOdds([3, 2, 1], [9, 1, 1, 1, 4, 15, -1])
...should result in [-1, 1, 3, 9, 15]
Think about the following; you may need to make assumptions or decisions about the prompt and how the code should behave:
What should happen with unexpected inputs?
What kinds of unexpected inputs should we worry about?
What should happen when there are multiples of the same odd number in the arrays? (Hint: We gave you the answer to this one in the example above.)

Expect concatOdds([1,2], [3,4]) to be an array
Expect concatOdds([1,2], [3,4]) to be ([1,3])	
Expect concatOdds([3,4], [1,2]) to be ([1,3]) 	
Expect concatOdds([3,1], [2,4]) to be ([1,3])	
Expect concatOdds([2,1], [4,3]) to be ([1,3])
Expect concatOdds([1], [3]) to be ([1,3])
Expect concatOdds([3,2,4], [1]) to be ([1,3])		
Expect concatOdds([2,0], [4,6]) to be ([])	
Expect concatOdds([3,-2], [-3,4]) to be ([-3,3])	
Expect concatOdds([1,3], [1,3]) to be ([1,3])
Expect concatOdds([{3}], [3]) to be an error
Expect concatOdds([[3]], [3]) to be an error
Expect concatOdds([“3”], [3]) to be an error
Expect concatOdds(3, [3]) to be an error
Expect concatOdds(3*3, [3]) to be an error
Expect concatOdds([3*3], [3]) to be an error
Expect concatOdds([], [3]) to be an error
Expect concatOdds([3], [3], [3]) to be an error


Functional Tests:
A shopping cart checkout feature that allows a user to check out as a guest (without an account), or as a logged-in user. They should be allowed to do either, but should be asked if they want to create an account or log in if they check out as a guest.
Think about the following; you may need to make assumptions or decisions about the prompt and how the feature should behave:
What should happen if the cart is empty?
What needs to be shown to the user at each step of check out?
What behaviors of this feature does the prompt miss or gloss over?
Hint: Observe the shopping cart and checkout features of some popular websites to get some ideas!

When a guest clicks “Proceed to Checkout” with at least one item in their cart, they are prompted to create an account, log in, or check out as guest.
When a guest clicks “Create Account”, they are directed to the create new account page.
When a guest clicks “Log in”, enters correct username and password into the login modal, and clicks the Log in button, they are directed to the checkout page and their user information is accurately displayed in the text fields.
When a guest clicks “Log in”, enters incorrect username and/or password into the login modal, and clicks the Log in button, they are shown an error within the modal and are not redirected.
When a guest clicks “Check Out as Guest”, they are directed to the checkout page and no information is populated in the text fields on page load.
When a user clicks “Proceed to Checkout” with at least one item in their cart, they are directed to the checkout page and their user information is accurately populated in the text fields on page load.
When a guest or user with no access to the checkout page clicks “Proceed to Checkout”, they are directed to the “Oops” (403:Forbidden) page.
When a user or guest clicks “Proceed to Checkout” with no items in their cart, they are shown an error and prompted to go back to the main shopping page.

	

















